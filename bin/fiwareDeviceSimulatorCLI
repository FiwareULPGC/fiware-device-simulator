#!/usr/bin/env node

/*
 * Copyright 2016 Telefónica Investigación y Desarrollo, S.A.U
 *
 * This file is part of the Short Time Historic (STH) component
 *
 * STH is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * STH is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with STH.
 * If not, see http://www.gnu.org/licenses/.
 *
 * For those usages not covered by the GNU Affero General Public License
 * please contact with: [german.torodelvalle@telefonica.com]
 */

'use strict';

var ROOT_PATH = require('app-root-path');
var commander = require('commander');
var logops = require('logops');
var deviceSimulator = require(ROOT_PATH + '/lib/fiwareDeviceSimulator');

process.on('SIGINT', function() {
  deviceSimulator.stop();
  process.exit(0);
});

/**
 * Executes the requested commander
 */
function executeCommand() {
  if (!commander.configuration) {
    commander.help();
  }

  var configurationFilePath;
  if (commander.configuration[0] === '/') {
    configurationFilePath = commander.configuration;
  } else if (commander.configuration[0] === '.') {
    configurationFilePath = ROOT_PATH + commander.configuration.substring(1);
  } else {
    commander.help();
  }

  var progressEmitter = deviceSimulator.start(require(configurationFilePath));

  progressEmitter.on('token-request', function() {
    logops.info('token-request event');
  });

  progressEmitter.on('token-response', function(ev) {
    logops.info('token-response event:', ev);
  });

  progressEmitter.on('token-request-scheduled', function(ev) {
    logops.info('token-request-scheduled:', ev);
  });

  progressEmitter.on('update-scheduled', function(ev) {
    logops.info('update-scheduled event:', ev);
  });

  progressEmitter.on('update-request', function(ev) {
    logops.debug('update-request event:', ev);
  });

  progressEmitter.on('error', function(ev) {
    logops.error('error event:', ev);
  });

  progressEmitter.on('update-response', function(ev) {
    logops.debug('response event:', ev);
  });

  progressEmitter.on('stop', function() {
    logops.info('stop event');
  });

  progressEmitter.on('end', function() {
    logops.info('end event');
    process.exit(0);
  });
}

commander.
  version(require(ROOT_PATH + '/package.json').version).
  option('-c, --configuration <configuration-file-path>',
    'Absolute or relative path (from the root of the Node application) to the device simulator configuration file ' +
      '(mandatory)').
  parse(process.argv);

executeCommand();
