#!/usr/bin/env node

/*
 * Copyright 2016 Telefónica Investigación y Desarrollo, S.A.U
 *
 * This file is part of the Short Time Historic (STH) component
 *
 * STH is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * STH is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with STH.
 * If not, see http://www.gnu.org/licenses/.
 *
 * For those usages not covered by the GNU Affero General Public License
 * please contact with: [german.torodelvalle@telefonica.com]
 */

'use strict';

var ROOT_PATH = require('app-root-path');
var async = require('async');
var commander = require('commander');
var fs = require('fs');
var logops = require('logops');
var humanizeDuration = require('humanize-duration');
var path = require('path');
var request = require('request');
var deviceSimulator = require(ROOT_PATH + '/lib/fiwareDeviceSimulator');

/**
 * Array with the last 10 emitted errors
 * @type {Array}
 */
var errors = [];

/**
 * Last emitted progress information
 */
var progressInfo;

process.on('SIGINT', function() {
  deviceSimulator.stop();
});

process.on('uncaughtException', function() {
  deviceSimulator.stop();
});

/**
 * Helper function to create Dates from the passed argument
 * @param  {String} date The date string
 * @return {Date}        The date
 */
function createDate(date) {
  return new Date(date);
}

/**
 * Processes a progress-info event and generates the corresponding progress information object
 * @param  {Object} ev The progress-info event
 */
function processProgressInfo(ev) {
  progressInfo = {
    totalUpdateRequests: ev.updatesRequested,
    elapsedTime: humanizeDuration(ev.elapsedTime),
    throughput: (ev.updatesRequested / (ev.elapsedTime / 1000)).toFixed(2),
    delayedUpdateRequests: ev.delayedUpdateRequests,
    delayedUpdateRequestsX100: (ev.updatesProcessed ?
      (100 * ev.delayedUpdateRequests / ev.updatesProcessed).toFixed(2) :
      'N/A'),
    errorUpdateRequests: ev.errorUpdateRequests,
    errorUpdateRequestsX100: (ev.updatesProcessed ?
      (100 * ev.errorUpdateRequests / ev.updatesProcessed).toFixed(2) :
      'N/A')
  };
  if (commander.to) {
    progressInfo.simulatedPendingTime = humanizeDuration(commander.to - commander.from - ev.simulatedElapsedTime);
  } else {
    progressInfo.simulatedPendingTime = 'N/A';
  }
  progressInfo.simulatedElapsedTime = humanizeDuration(ev.simulatedElapsedTime);
  if (commander.to) {
    progressInfo.pendingTime = humanizeDuration(
      ((commander.to.getTime() -
        (commander.from.getTime() + ev.simulatedElapsedTime)) * ev.elapsedTime) /
        ev.simulatedElapsedTime);
  } else {
    progressInfo.pendingTime = 'N/A';
  }
}

/**
 * Writes the simulation progress information to the console if configured
 */
function writeToConsole() {
  if (!commander.silent && progressInfo) {
    logops.info(
      'progress-info',
      {
        totalUpdateRequests: progressInfo.totalUpdateRequests + ' updates',
        throughput: progressInfo.throughput + ' updates/sec.',
        errorUpdateRequests: progressInfo.errorUpdateRequests + ' updates',
        errorUpdateRequestsX100: progressInfo.errorUpdateRequestsX100 + '%',
        delayedUpdateRequests: progressInfo.delayedUpdateRequests + ' updates',
        delayedUpdateRequestsX100: progressInfo.delayedUpdateRequestsX100 + '%',
        elapsedTime: progressInfo.elapsedTime,
        pendingTime: progressInfo.pendingTime,
        simulatedElapsedTime: progressInfo.simulatedElapsedTime,
        simulatedPendingTime: progressInfo.simulatedPendingTime
      }
    );
  }
}

/**
 * Dweets the simulation progress information if configured
 * @param  {Object}   dweetConfig The dweet.io configuration
 * @param  {Function} callback    The callback
 */
function dweet(dweetConfig, callback) {
  if (dweetConfig && progressInfo) {
    progressInfo.errors = errors;
    request.post(
      {
        url: 'https://dweet.io/dweet/for/' + dweetConfig.name +
          (dweetConfig.apiKey ? '?key=' + dweetConfig.apiKey : ''),
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        json: true,
        body: progressInfo
      },
      function(err, response, body) {
        process.nextTick(callback.bind(null, err || body.because, response, body));
      }
    );
  } else {
    process.nextTick(callback);
  }
}

/**
 * Executes the requested commander
 */
function executeCommand() {
  if (!commander.configuration) {
    commander.help();
  }

  var configurationFilePath;
  if (commander.configuration[0] === '/') {
    configurationFilePath = commander.configuration;
  } else if (commander.configuration[0] === '.') {
    configurationFilePath = ROOT_PATH + commander.configuration.substring(1);
  } else {
    configurationFilePath = ROOT_PATH + path.sep + commander.configuration;
  }

  if (!fs.existsSync(configurationFilePath)) {
    logops.error('The provided simulation configuration file path (\'' + configurationFilePath + '\') does not exist');
    commander.help();
  }

  if (commander.to) {
    if (!commander.from && commander.to <= new Date()) {
      logops.error('If no fromDate is provided, the toDate must be beyond the current time and date');
      commander.help();
    } else {
      commander.from = commander.from || new Date();
    }
  }

  var dweetConfig;
  if (commander.dweet) {
    try {
      dweetConfig = JSON.parse(commander.dweet);
      if (!dweetConfig.name) {
        logops.error('The dweet.io configuration information should be an object including a \'name\' property ' +
          'the thing name');
        commander.help();
      }
    } catch(exception) {
      logops.error('Error when parsing the dweet.io configuration information: ' + exception);
      commander.help();
    }
  }

  var progressEmitter = deviceSimulator.start(
    require(configurationFilePath), commander.from, commander.to, commander.progressInfoInterval,
    commander.maximumNotRespondedRequests, commander.delay || 1000);

  progressEmitter.on('token-request', function() {
    logops.debug('token-request event');
  });

  progressEmitter.on('token-response', function(ev) {
    logops.debug('token-response event:', ev);
  });

  progressEmitter.on('token-request-scheduled', function(ev) {
    logops.debug('token-request-scheduled:', ev);
  });

  progressEmitter.on('update-scheduled', function(ev) {
    logops.debug('update-scheduled event:', ev);
  });

  progressEmitter.on('update-request', function(ev) {
    logops.debug('update-request event:', ev);
  });

  progressEmitter.on('info', function(ev) {
    logops.info('info event:', ev.message);
  });

  progressEmitter.on('error', function(ev) {
    errors.slice(0, (errors.length === 10 ? 1 : 0), { timestamp: new Date(), error: JSON.stringify(ev) });
    logops.error('error event:', ev);
  });

  progressEmitter.on('update-response', function(ev) {
    logops.debug('response event:', ev);
  });

  progressEmitter.on('progress-info', function(ev) {
    processProgressInfo(ev);
    writeToConsole();
    dweet(dweetConfig, function(err) {
      if (err) {
        logops.error('error event: Error when dweeting for \'' + dweetConfig.name + '\': ' + err);
      }
    });
  });

  progressEmitter.on('stop', function() {
    logops.info('stop event');
  });

  progressEmitter.on('end', function() {
    async.retry(
      { times: 5, interval: 1000},
      async.apply(dweet, dweetConfig),
      function(err) {
        if (err) {
          logops.error('error event: Error when dweeting for \'' + dweetConfig.name + '\': ' + err);
        } else {
          logops.info('end event');
        }
        process.exit(0);
      }
    );
  });
}

commander.
  version(require(ROOT_PATH + '/package.json').version).
  option('-c, --configuration <configuration-file-path>',
    'Absolute or relative path (from the root of the Node application) to the device simulator configuration file ' +
      '(mandatory)').
  option('-d, --delay <milliseconds>', 'The delay in milliseconds for future updates when the number of update ' +
    'requests waiting for response is bigger than the value set with the -m option (defaults to 1 second if -m is ' +
    'set and -d is not set, it has no effect if -m is not set)',
    parseInt).
  option('-m, --maximumNotRespondedRequests <requests>', 'The maximum number of update requests not responded before ' +
    'applying delay', parseInt).
  option('-p, --progressInfoInterval <milliseconds>', 'The interval in milliseconds to show progress information ' +
    ' for fast-forward simulation', parseInt).
  option('-s, --silent', 'No progress information will be output by the console').
  option('-w, --dweet <dweetConfiguration>', 'Configuration information to publish the simulation progress ' +
         'information in dweet.io (it must be an object containing a \'name\' property for the dweet thing and ' +
         'optionally an \'apiKey\' property in case the thing is locked, for example: ' +
         '-w "{\\"name\\": \\"fds:Test:001\\"}")').
  option('-f, --from <fromDate>', 'The start date to begin the fast-forward simulation (if not set, the current ' +
    'time will be used)', createDate).
  option('-t, --to <toDate>', 'The end date to stop the fast-forward simulation (if not set, the fast-forward ' +
    'will progress to the future and never end)', createDate).
  parse(process.argv);

executeCommand();
